import { rgbToHex } from '../actions/rgbToHex';
import { drawCircle } from './drawCircle';
import { ctx } from '../../index';


export function displayNetwork(xSpace, ySpace, xPos, yPos, weightArray, biasArray, layer) {
    drawBiases(xSpace, ySpace, xPos, yPos, biasArray, layer)

    layer++;
    if (layer === biasArray.length) {
        return
    }
    drawWeights(xSpace, ySpace, xPos, yPos, weightArray, layer)
    
    return displayNetwork(xSpace, ySpace, xPos, yPos, weightArray, biasArray, layer);

}

export function drawBiases(xSpace, ySpace, xPos, yPos, biasArray, layer) {
    for (let j = 0; j < biasArray[layer].length; j++) {
        drawCircle(12, 'yellow', 'black', 3, (layer * xSpace) + xPos, (j * ySpace) + yPos);
    }
}

export function drawWeights(xSpace, ySpace, xPos, yPos, weightArray, layer) {
    for (let j = 0; j < weightArray[layer].length; j++) {
        for (let k = 0; k < weightArray[layer][j].length; k++) {
            let colour = weightArray[layer][j][k]
            colour = Math.round(colour)
            drawWeightLine(xSpace, ySpace, xPos, yPos, layer, j, k, colour)
        }
    }
}

export function drawWeightLine(xSpace, ySpace, xPos, yPos, layer, j, k, colour) {
            if (colour < 0) {
                colour= 225 - colour*200
                colour = rgbToHex(255, colour, colour)
            } else {
                colour= 225 - colour*200
                colour = rgbToHex(colour, 255, colour)
            }

            ctx.strokeStyle = colour;
            ctx.lineWidth = 1;
            ctx.beginPath()
            ctx.moveTo(((layer-1)*xSpace) + xPos, j*ySpace + yPos)
            ctx.lineTo(layer * xSpace + xPos, k*ySpace + yPos)
            ctx.stroke()
}

